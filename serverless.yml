service: crawler
plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-step-functions
  - serverless-step-functions-offline
  - serverless-offline
package:
  individually: true
custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  table_throughputs:
    prod: 20
    default: 20
  table_throughput: ${self:custom.table_throughputs.${self:custom.stage}, self:custom.table_throughputs.default}
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    target: node14
    define:
      require.resolve: undefined
    platform: 'node'
    concurrency: 10
  dynamodb:
    start:
      port: 5000
      inMemory: true
      heapInitial: "200m"
      heapMax: "1g"
      migrate: true
      seed: true
      convertEmptyValues: true
    stages: dev
  property_table: PropertyTable
  job_table: JobTable
  x-workflow: &workflow
    definition:
      StartAt: Crawling
      States:
        Crawling:
          Type: Task
          Resource:
            Fn::GetAtt: [ crawl, Arn ]
          Next: CheckResume
        CheckResume:
          Type: Choice
          Choices:
            - Variable: "$.body.resume"
              BooleanEquals: true
              Next: Crawling
          Default: EndingJob
        EndingJob:
          Type: Task
          Resource:
            Fn::GetAtt: [ endJob, Arn ]
          End: true
provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: 'eu-central-1'
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: --enable-source-maps --stack-trace-limit=1000
    REGION: ${self:custom.region}
    STAGE: ${self:custom.stage}
    PROPERTY_TABLE: ${self:custom.property_table}
    JOB_TABLE: ${self:custom.job_table}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource:
            Fn::GetAtt: [PropertyTable, Arn]
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            Fn::GetAtt: [JobTable, Arn]

functions: ${file(./resources/functions.yml)}
resources: ${file(./resources/dynamoDB.yml)}
stepFunctions:
  stateMachines:
    DANBOLIG:
      <<: *workflow
      events:
        - http:
            path: start/danbolig
            method: post
            cors: true
        - schedule:
            rate: rate(12 hours)
            enabled: true
            input:
              body:
                source: DANBOLIG
    NYBOLIG:
      <<: *workflow
      events:
        - http:
            path: start/nybolig
            method: post
            cors: true
        - schedule:
            rate: rate(12 hours)
            enabled: true
            input:
              body:
                source: NYBOLIG
